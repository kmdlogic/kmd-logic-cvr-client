// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Cvr.Client
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    internal partial interface IInternalClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Gets Production unit detail by production unit number
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscription ID
        /// </param>
        /// <param name='pNumber'>
        /// Production unit number
        /// </param>
        /// <param name='configurationId'>
        /// Identifier that represents CVR environment and associated
        /// configuration which this request will be sent with.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetProductionUnitDetailByPNumberWithHttpMessagesAsync(System.Guid subscriptionId, string pNumber, System.Guid? configurationId = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Production unit detail by object id.
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscription ID
        /// </param>
        /// <param name='id'>
        /// The company's production unit object Id. This may differ between
        /// providers.
        /// </param>
        /// <param name='configurationId'>
        /// Identifier that represents CVR environment and associated
        /// configuration which this request will be sent with.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetProductionUnitDetailByIdWithHttpMessagesAsync(System.Guid subscriptionId, string id, System.Guid? configurationId = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Company information by CVR number
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscription ID
        /// </param>
        /// <param name='cvr'>
        /// CVR number
        /// </param>
        /// <param name='configurationId'>
        /// Identifier that represents CVR environment and associated
        /// configuration which this request will be sent with.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetByCvrWithHttpMessagesAsync(System.Guid subscriptionId, string cvr, System.Guid? configurationId = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Company information by object Id.
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscription ID
        /// </param>
        /// <param name='id'>
        /// The company object Id. This may differ between providers.
        /// </param>
        /// <param name='configurationId'>
        /// Identifier that represents CVR environment and associated
        /// configuration which this request will be sent with.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetByIdWithHttpMessagesAsync(System.Guid subscriptionId, string id, System.Guid? configurationId = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Production Units information by CVR number
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscription ID
        /// </param>
        /// <param name='cvr'>
        /// CVR number
        /// </param>
        /// <param name='configurationId'>
        /// Identifier that represents CVR environment and associated
        /// configuration which this request will be sent with.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetProductionUnitsByCvrWithHttpMessagesAsync(System.Guid subscriptionId, string cvr, System.Guid? configurationId = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Company events for the nominated period
        /// </summary>
        /// <param name='subscriptionId'>
        /// LoGIC subscription ID
        /// </param>
        /// <param name='dateFrom'>
        /// Query events from this date and time
        /// </param>
        /// <param name='dateTo'>
        /// Query events to this date and time
        /// </param>
        /// <param name='configurationId'>
        /// Identifier that represents CVR environment and associated
        /// configuration which this request will be sent with.
        /// </param>
        /// <param name='pageNo'>
        /// The page number to query
        /// </param>
        /// <param name='pageSize'>
        /// The maximum number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetEventsWithHttpMessagesAsync(System.Guid subscriptionId, System.DateTime dateFrom, System.DateTime dateTo, System.Guid? configurationId = default(System.Guid?), int? pageNo = default(int?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the subscribed company events for the nominated period
        /// </summary>
        /// <param name='subscriptionId'>
        /// LoGIC subscription ID
        /// </param>
        /// <param name='dateFrom'>
        /// Query events from this date and time
        /// </param>
        /// <param name='dateTo'>
        /// Query events to this date and time
        /// </param>
        /// <param name='configurationId'>
        /// Identifier that represents CVR environment and associated
        /// configuration which this request will be sent with.
        /// </param>
        /// <param name='pageNo'>
        /// The page number to query
        /// </param>
        /// <param name='pageSize'>
        /// The maximum number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetSubscribedEventsWithHttpMessagesAsync(System.Guid subscriptionId, System.DateTime dateFrom, System.DateTime dateTo, System.Guid? configurationId = default(System.Guid?), int? pageNo = default(int?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves CVR configuration assigned to the logic subscription
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='configurationId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CvrProviderConfigurationModel>> GetCvrConfigurationWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid configurationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves all CVR configurations assigned to the logic subscription
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<CvrProviderConfigurationModel>>> GetAllCvrConfigurationsWithHttpMessagesAsync(System.Guid subscriptionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Subscribe to Cvr events by Object Id
        /// </summary>
        /// <param name='subscriptionId'>
        /// LoGIC subscription ID
        /// </param>
        /// <param name='objectId'>
        /// Object Id
        /// </param>
        /// <param name='request'>
        /// CVR Subscription Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> SubscribeByObjectIdWithHttpMessagesAsync(System.Guid subscriptionId, string objectId, CvrSubscriptionRequest request = default(CvrSubscriptionRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unsubscribe from Cvr events by object id
        /// </summary>
        /// <param name='subscriptionId'>
        /// LoGIC subscription ID
        /// </param>
        /// <param name='objectId'>
        /// Object Id
        /// </param>
        /// <param name='configurationId'>
        /// CVR Configuration ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IDictionary<string, string>>> UnsubscribeByObjectIdWithHttpMessagesAsync(System.Guid subscriptionId, string objectId, System.Guid? configurationId = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds new CVR configuration and uploads certificate file to the
        /// Azure Key Vault
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='environment'>
        /// Possible values include: 'Production', 'Test'
        /// </param>
        /// <param name='certificate'>
        /// </param>
        /// <param name='certificatePassword'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CvrProviderConfiguration>> CreateDataDistributorCvrConfigurationWithHttpMessagesAsync(System.Guid subscriptionId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds or updates existing cvr configuration and uploads certificate
        /// file to the Azure Key Vault
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='configurationId'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='environment'>
        /// Possible values include: 'Production', 'Test'
        /// </param>
        /// <param name='certificate'>
        /// </param>
        /// <param name='certificatePassword'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CvrProviderConfiguration>> UpdateDataDistributorCvrConfigurationWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid configurationId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FakeCvrConfigurationResponseModel>> CreateFakeProviderConfigurationWithHttpMessagesAsync(System.Guid subscriptionId, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='configurationId'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FakeCvrConfigurationResponseModel>> UpdateFakeProviderConfigurationWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid configurationId, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Custom Data sets for cvr fake provider
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='configurationId'>
        /// </param>
        /// <param name='companyData'>
        /// </param>
        /// <param name='productionUnitData'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FakeCvrConfigurationResponseModel>> SaveDataWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid configurationId, Stream companyData = default(Stream), Stream productionUnitData = default(Stream), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Custom Event Data sets for cvr fake provider
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='configurationId'>
        /// </param>
        /// <param name='eventsData'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FakeCvrConfigurationResponseModel>> SaveEventDataWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid configurationId, Stream eventsData = default(Stream), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='environment'>
        /// Possible values include: 'Production', 'Test'
        /// </param>
        /// <param name='certificate'>
        /// </param>
        /// <param name='certificatePassword'>
        /// </param>
        /// <param name='serviceAgreementUuid'>
        /// </param>
        /// <param name='userSystemUuid'>
        /// </param>
        /// <param name='userUuid'>
        /// All supported UserUuids can be fetched using '/municipalities'
        /// endpoint.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ServicePlatformCvrProviderConfiguration>> CreateServicePlatformConfigurationWithHttpMessagesAsync(System.Guid subscriptionId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), string serviceAgreementUuid = default(string), string userSystemUuid = default(string), string userUuid = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='configurationId'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='environment'>
        /// Possible values include: 'Production', 'Test'
        /// </param>
        /// <param name='certificate'>
        /// </param>
        /// <param name='certificatePassword'>
        /// </param>
        /// <param name='serviceAgreementUuid'>
        /// </param>
        /// <param name='userSystemUuid'>
        /// </param>
        /// <param name='userUuid'>
        /// All supported UserUuids can be fetched using '/municipalities'
        /// endpoint.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ServicePlatformCvrProviderConfiguration>> UpdateServicePlatformConfigurationWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid configurationId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), string serviceAgreementUuid = default(string), string userSystemUuid = default(string), string userUuid = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
