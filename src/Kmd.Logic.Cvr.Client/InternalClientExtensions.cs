// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Cvr.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InternalClient.
    /// </summary>
    internal static partial class InternalClientExtensions
    {
            /// <summary>
            /// Gets Production unit detail by production unit number
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription ID
            /// </param>
            /// <param name='pNumber'>
            /// Production unit number
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CVR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            public static object GetProductionUnitDetailByPNumber(this IInternalClient operations, System.Guid subscriptionId, string pNumber, System.Guid? configurationId = default(System.Guid?))
            {
                return operations.GetProductionUnitDetailByPNumberAsync(subscriptionId, pNumber, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets Production unit detail by production unit number
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription ID
            /// </param>
            /// <param name='pNumber'>
            /// Production unit number
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CVR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetProductionUnitDetailByPNumberAsync(this IInternalClient operations, System.Guid subscriptionId, string pNumber, System.Guid? configurationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProductionUnitDetailByPNumberWithHttpMessagesAsync(subscriptionId, pNumber, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets Production unit detail by object id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription ID
            /// </param>
            /// <param name='id'>
            /// The company's production unit object Id. This may differ between providers.
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CVR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            public static object GetProductionUnitDetailById(this IInternalClient operations, System.Guid subscriptionId, string id, System.Guid? configurationId = default(System.Guid?))
            {
                return operations.GetProductionUnitDetailByIdAsync(subscriptionId, id, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets Production unit detail by object id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription ID
            /// </param>
            /// <param name='id'>
            /// The company's production unit object Id. This may differ between providers.
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CVR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetProductionUnitDetailByIdAsync(this IInternalClient operations, System.Guid subscriptionId, string id, System.Guid? configurationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProductionUnitDetailByIdWithHttpMessagesAsync(subscriptionId, id, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets Company information by CVR number
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription ID
            /// </param>
            /// <param name='cvr'>
            /// CVR number
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CVR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            public static object GetByCvr(this IInternalClient operations, System.Guid subscriptionId, string cvr, System.Guid? configurationId = default(System.Guid?))
            {
                return operations.GetByCvrAsync(subscriptionId, cvr, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets Company information by CVR number
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription ID
            /// </param>
            /// <param name='cvr'>
            /// CVR number
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CVR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByCvrAsync(this IInternalClient operations, System.Guid subscriptionId, string cvr, System.Guid? configurationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByCvrWithHttpMessagesAsync(subscriptionId, cvr, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets Company information by object Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription ID
            /// </param>
            /// <param name='id'>
            /// The company object Id. This may differ between providers.
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CVR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            public static object GetById(this IInternalClient operations, System.Guid subscriptionId, string id, System.Guid? configurationId = default(System.Guid?))
            {
                return operations.GetByIdAsync(subscriptionId, id, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets Company information by object Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription ID
            /// </param>
            /// <param name='id'>
            /// The company object Id. This may differ between providers.
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CVR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByIdAsync(this IInternalClient operations, System.Guid subscriptionId, string id, System.Guid? configurationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(subscriptionId, id, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets Production Units information by CVR number
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription ID
            /// </param>
            /// <param name='cvr'>
            /// CVR number
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CVR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            public static object GetProductionUnitsByCvr(this IInternalClient operations, System.Guid subscriptionId, string cvr, System.Guid? configurationId = default(System.Guid?))
            {
                return operations.GetProductionUnitsByCvrAsync(subscriptionId, cvr, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets Production Units information by CVR number
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription ID
            /// </param>
            /// <param name='cvr'>
            /// CVR number
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CVR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetProductionUnitsByCvrAsync(this IInternalClient operations, System.Guid subscriptionId, string cvr, System.Guid? configurationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProductionUnitsByCvrWithHttpMessagesAsync(subscriptionId, cvr, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets Company events for the nominated period
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='dateFrom'>
            /// Query events from this date and time
            /// </param>
            /// <param name='dateTo'>
            /// Query events to this date and time
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CVR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='pageNo'>
            /// The page number to query
            /// </param>
            /// <param name='pageSize'>
            /// The maximum number of results to return
            /// </param>
            public static object GetEvents(this IInternalClient operations, System.Guid subscriptionId, System.DateTime dateFrom, System.DateTime dateTo, System.Guid? configurationId = default(System.Guid?), int? pageNo = default(int?), int? pageSize = default(int?))
            {
                return operations.GetEventsAsync(subscriptionId, dateFrom, dateTo, configurationId, pageNo, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets Company events for the nominated period
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='dateFrom'>
            /// Query events from this date and time
            /// </param>
            /// <param name='dateTo'>
            /// Query events to this date and time
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CVR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='pageNo'>
            /// The page number to query
            /// </param>
            /// <param name='pageSize'>
            /// The maximum number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEventsAsync(this IInternalClient operations, System.Guid subscriptionId, System.DateTime dateFrom, System.DateTime dateTo, System.Guid? configurationId = default(System.Guid?), int? pageNo = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventsWithHttpMessagesAsync(subscriptionId, dateFrom, dateTo, configurationId, pageNo, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the subscribed company events for the nominated period
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='dateFrom'>
            /// Query events from this date and time
            /// </param>
            /// <param name='dateTo'>
            /// Query events to this date and time
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CVR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='pageNo'>
            /// The page number to query
            /// </param>
            /// <param name='pageSize'>
            /// The maximum number of results to return
            /// </param>
            public static object GetSubscribedEvents(this IInternalClient operations, System.Guid subscriptionId, System.DateTime dateFrom, System.DateTime dateTo, System.Guid? configurationId = default(System.Guid?), int? pageNo = default(int?), int? pageSize = default(int?))
            {
                return operations.GetSubscribedEventsAsync(subscriptionId, dateFrom, dateTo, configurationId, pageNo, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the subscribed company events for the nominated period
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='dateFrom'>
            /// Query events from this date and time
            /// </param>
            /// <param name='dateTo'>
            /// Query events to this date and time
            /// </param>
            /// <param name='configurationId'>
            /// Identifier that represents CVR environment and associated configuration
            /// which this request will be sent with.
            /// </param>
            /// <param name='pageNo'>
            /// The page number to query
            /// </param>
            /// <param name='pageSize'>
            /// The maximum number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscribedEventsAsync(this IInternalClient operations, System.Guid subscriptionId, System.DateTime dateFrom, System.DateTime dateTo, System.Guid? configurationId = default(System.Guid?), int? pageNo = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscribedEventsWithHttpMessagesAsync(subscriptionId, dateFrom, dateTo, configurationId, pageNo, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves CVR configuration assigned to the logic subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            public static CvrProviderConfigurationModel GetCvrConfiguration(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId)
            {
                return operations.GetCvrConfigurationAsync(subscriptionId, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves CVR configuration assigned to the logic subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CvrProviderConfigurationModel> GetCvrConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCvrConfigurationWithHttpMessagesAsync(subscriptionId, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all CVR configurations assigned to the logic subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static IList<CvrProviderConfigurationModel> GetAllCvrConfigurations(this IInternalClient operations, System.Guid subscriptionId)
            {
                return operations.GetAllCvrConfigurationsAsync(subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all CVR configurations assigned to the logic subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CvrProviderConfigurationModel>> GetAllCvrConfigurationsAsync(this IInternalClient operations, System.Guid subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllCvrConfigurationsWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Subscribe to Cvr events by Object Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='objectId'>
            /// Object Id
            /// </param>
            /// <param name='request'>
            /// CVR Subscription Request
            /// </param>
            public static object SubscribeByObjectId(this IInternalClient operations, System.Guid subscriptionId, string objectId, CvrSubscriptionRequest request = default(CvrSubscriptionRequest))
            {
                return operations.SubscribeByObjectIdAsync(subscriptionId, objectId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribe to Cvr events by Object Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='objectId'>
            /// Object Id
            /// </param>
            /// <param name='request'>
            /// CVR Subscription Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SubscribeByObjectIdAsync(this IInternalClient operations, System.Guid subscriptionId, string objectId, CvrSubscriptionRequest request = default(CvrSubscriptionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SubscribeByObjectIdWithHttpMessagesAsync(subscriptionId, objectId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unsubscribe from Cvr events by object id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='objectId'>
            /// Object Id
            /// </param>
            /// <param name='configurationId'>
            /// CVR Configuration ID
            /// </param>
            public static IDictionary<string, string> UnsubscribeByObjectId(this IInternalClient operations, System.Guid subscriptionId, string objectId, System.Guid? configurationId = default(System.Guid?))
            {
                return operations.UnsubscribeByObjectIdAsync(subscriptionId, objectId, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribe from Cvr events by object id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// LoGIC subscription ID
            /// </param>
            /// <param name='objectId'>
            /// Object Id
            /// </param>
            /// <param name='configurationId'>
            /// CVR Configuration ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> UnsubscribeByObjectIdAsync(this IInternalClient operations, System.Guid subscriptionId, string objectId, System.Guid? configurationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnsubscribeByObjectIdWithHttpMessagesAsync(subscriptionId, objectId, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds new CVR configuration and uploads certificate file to the Azure Key
            /// Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            public static CvrProviderConfiguration CreateDataDistributorCvrConfiguration(this IInternalClient operations, System.Guid subscriptionId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string))
            {
                return operations.CreateDataDistributorCvrConfigurationAsync(subscriptionId, name, environment, certificate, certificatePassword).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds new CVR configuration and uploads certificate file to the Azure Key
            /// Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CvrProviderConfiguration> CreateDataDistributorCvrConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDataDistributorCvrConfigurationWithHttpMessagesAsync(subscriptionId, name, environment, certificate, certificatePassword, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds or updates existing cvr configuration and uploads certificate file to
            /// the Azure Key Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            public static CvrProviderConfiguration UpdateDataDistributorCvrConfiguration(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string))
            {
                return operations.UpdateDataDistributorCvrConfigurationAsync(subscriptionId, configurationId, name, environment, certificate, certificatePassword).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds or updates existing cvr configuration and uploads certificate file to
            /// the Azure Key Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CvrProviderConfiguration> UpdateDataDistributorCvrConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDataDistributorCvrConfigurationWithHttpMessagesAsync(subscriptionId, configurationId, name, environment, certificate, certificatePassword, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static CvrFakeProviderConfiguration CreateFakeProviderConfiguration(this IInternalClient operations, System.Guid subscriptionId, string name)
            {
                return operations.CreateFakeProviderConfigurationAsync(subscriptionId, name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CvrFakeProviderConfiguration> CreateFakeProviderConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateFakeProviderConfigurationWithHttpMessagesAsync(subscriptionId, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static CvrFakeProviderConfiguration UpdateFakeProviderConfiguration(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, string name)
            {
                return operations.UpdateFakeProviderConfigurationAsync(subscriptionId, configurationId, name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CvrFakeProviderConfiguration> UpdateFakeProviderConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateFakeProviderConfigurationWithHttpMessagesAsync(subscriptionId, configurationId, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='serviceAgreementUuid'>
            /// </param>
            /// <param name='userSystemUuid'>
            /// </param>
            /// <param name='userUuid'>
            /// All supported UserUuids can be fetched using '/municipalities' endpoint.
            /// </param>
            public static ServicePlatformCvrProviderConfiguration CreateServicePlatformConfiguration(this IInternalClient operations, System.Guid subscriptionId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), string serviceAgreementUuid = default(string), string userSystemUuid = default(string), string userUuid = default(string))
            {
                return operations.CreateServicePlatformConfigurationAsync(subscriptionId, name, environment, certificate, certificatePassword, serviceAgreementUuid, userSystemUuid, userUuid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='serviceAgreementUuid'>
            /// </param>
            /// <param name='userSystemUuid'>
            /// </param>
            /// <param name='userUuid'>
            /// All supported UserUuids can be fetched using '/municipalities' endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServicePlatformCvrProviderConfiguration> CreateServicePlatformConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), string serviceAgreementUuid = default(string), string userSystemUuid = default(string), string userUuid = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateServicePlatformConfigurationWithHttpMessagesAsync(subscriptionId, name, environment, certificate, certificatePassword, serviceAgreementUuid, userSystemUuid, userUuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='serviceAgreementUuid'>
            /// </param>
            /// <param name='userSystemUuid'>
            /// </param>
            /// <param name='userUuid'>
            /// All supported UserUuids can be fetched using '/municipalities' endpoint.
            /// </param>
            public static ServicePlatformCvrProviderConfiguration UpdateServicePlatformConfiguration(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), string serviceAgreementUuid = default(string), string userSystemUuid = default(string), string userUuid = default(string))
            {
                return operations.UpdateServicePlatformConfigurationAsync(subscriptionId, configurationId, name, environment, certificate, certificatePassword, serviceAgreementUuid, userSystemUuid, userUuid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='configurationId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'Production', 'Test'
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='serviceAgreementUuid'>
            /// </param>
            /// <param name='userSystemUuid'>
            /// </param>
            /// <param name='userUuid'>
            /// All supported UserUuids can be fetched using '/municipalities' endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServicePlatformCvrProviderConfiguration> UpdateServicePlatformConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, string name = default(string), string environment = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), string serviceAgreementUuid = default(string), string userSystemUuid = default(string), string userUuid = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateServicePlatformConfigurationWithHttpMessagesAsync(subscriptionId, configurationId, name, environment, certificate, certificatePassword, serviceAgreementUuid, userSystemUuid, userUuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
